# Makefile for sequence_of_flights.out.

# A Makefile generally consists of a series of rules. Each rule
# generally looks like this:
# target: dependencies
# 	command

# The target is the name of the file that must be generated. The
# dependencies are files that the target depends on. The command is
# the command that must be executed to generate the target.

# First, we define some variables. Variables are used to avoid
# repetition. For example, we define the variable CC to be the name
# of the compiler. Then, we can use $(CC) instead of gcc in the
# rules. If we want to change the compiler, we only have to change
# the definition of CC.

# Compiler (modify if necessary)
CC      = gcc

# Compiler command for object files
COMPILE = $(CC) -c

# Linker command for creating executables
LINK    = $(CC) -o

# Specify the name of the executable file here
PROGRAM = sequence_of_flights.out

# This .PHONY rule keeps make from doing something with a file named
# 'all' or 'clean'. It tells make that 'all' and 'clean' are not real
# files, but are just names for rules. This rules are executed when
# you type 'make all' or 'make clean'.
.PHONY: all clean

# The all rule creates all the executables that are part of the
# program. It is the default rule, so you can just type 'make' to
# execute it.
all: $(PROGRAM)

# The clean rule is used to remove files that are generated by the
# compiler or by make. It is not part of the default rule, so you
# must type "make clean" to execute it. This also prevents you from
# accidentally deleting files by typing "make".

clean:
	rm -f sequence_of_flights.out sequence_of_flights.o

# The first rule in a Makefile is the default rule. It is executed
# when you type "make" without any arguments. It is usually used to
# compile the entire program.

# The following rule tells make how to compile sequence_of_flights.out
# The only dependency is sequence_of_flights.o, so make will compile
# sequence_of_flights.o and then link it with the C standard library
# to produce sequence_of_flights.out.

sequence_of_flights.out: sequence_of_flights.o
	$(LINK) sequence_of_flights.out sequence_of_flights.o

# An object file (.o) depends on the corresponding source file (.c)
# and any header files included by the source file.

# An object file contains machine code that has not yet been linked
# with other object files and libraries to produce an executable
# program.

sequence_of_flights.o: sequence_of_flights.c sequence_of_flights.h
	$(COMPILE) sequence_of_flights.c
